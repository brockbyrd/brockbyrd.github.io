---
layout: post
title:      "Sinatra Message Board"
date:       2020-10-27 17:35:36 -0400
permalink:  sinatra_message_board
---


I decided to create a message board with sports teams. People like to talk about specific teams with other fans of the teams, so I decided to have a 3 model project with users, teams, and posts. The process of going through the project was fairly smooth at first. I decided to do what I know first and just created the user and post models and connected them. Once those routes and view pages were finished and connected, I decided it was time to try to incorporate teams into the mix. This is where it got a little rocky.  I was having trouble adding the team_id attribute to a post, but with a little research and backtracking through the course, and figured out the issue. I decided at the tail end of the project build to add CSS and JS through Bootstrap4. Just to give my project a little bit of life and style. I did my best to make sure that my project "flowed " well. I tried to put myself in the shoes of the user to think of where I would want to be sent if something went wrong or where a button should go to take me to another page. I have been to a website where the routing has been awful, so that is the first thing that runs through my mind. The ability to create a page that is nice to look at and has a very easy user-interface goes a very long way. I think it gives the visitors of the website the want to come back. So in my opinion, good RESTful routing and CRUD should be number one when it comes to website development. The MVC pattern is a very easy, very popular to follow concept or pattern used in programming that caught my eye. It allows the developer to create very distinct but connected parts of an application. The ability to separate responsibility throughout the application while also being able to access it throughout the entire application with ease is something that blew my mind while learning it. Sometimes while scrolling through public applications, I will pull up the code. Some can be unbearable to try to read through because that developer did not use the practices of MVC or never separated responsibility throughout the application. Looking at a file with 100+ lines of code, while you have the ability to have 3 or so files with lesser code and a distinct split in what goes where and what line is responsible for what, can be strainful on the eyes and the mind.
